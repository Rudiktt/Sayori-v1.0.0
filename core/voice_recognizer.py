import speech_recognition as sr
import logging
import time
from typing import Optional, List

class VoiceRecognizer:
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(self.__class__.__name__)
        self.recognizer = sr.Recognizer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        self.recognizer.dynamic_energy_threshold = False
        self.recognizer.energy_threshold = config["audio"]["energy_threshold"]
        self.recognizer.pause_threshold = 0.8
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.microphone = self._initialize_microphone()
        self._test_microphone()

    def _initialize_microphone(self) -> sr.Microphone:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        available_mics = self._get_microphone_list()
        if not available_mics:
            raise RuntimeError("–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

        # –ü—Ä–æ–±—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for device_index in [self.config["microphone"]["device_index"], *range(len(available_mics))]:
            try:
                mic = sr.Microphone(
                    device_index=device_index,
                    sample_rate=self.config["audio"]["sample_rate"]
                )
                self.logger.info(f"–ü—Ä–æ–±—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω #{device_index}: {available_mics[device_index]}")
                return mic
            except Exception as e:
                self.logger.warning(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω #{device_index} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                continue

        raise RuntimeError("–ù–∏ –æ–¥–∏–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    def _get_microphone_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            return sr.Microphone.list_microphone_names()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤: {str(e)}")
            return []

    def _test_microphone(self):
        #–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        for attempt in range(3):
            try:
                with self.microphone as source:
                    self.logger.info(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})...")
                    self.recognizer.adjust_for_ambient_noise(source, duration=2)
                    print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                    return True
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {str(e)}")
                time.sleep(1)
        
        print("‚ö†Ô∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
        print("2. –î–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø")
        print("3. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return False

    def listen(self) -> Optional[str]:
    #–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        try:
            with self.microphone as source:
                print("\nüîä –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å...", end='', flush=True)
                audio = self.recognizer.listen(
                    source,
                    timeout=self.config["microphone"]["timeout"],
                    phrase_time_limit=5
                )
            
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            print(f"\rüé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            return text.lower()
            
        except sr.WaitTimeoutError:
            print("\r‚åõ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è...", end='')
            return None
        except sr.UnknownValueError:
            print("\r‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", end='')
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            return None

    def get_microphone_info(self) -> str:
        #–ò–Ω—Ñ–∞ –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ (—Ç–µ–∫—É—â–µ–º)
        mics = sr.Microphone.list_microphone_names()
        return f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∏–∫—Ä–æ—Ñ–æ–Ω #{self.microphone.device_index}: {mics[self.microphone.device_index]}"
    
    def register_mode_command(self, modes: list):
        self.mode_commands = {
            "–∞–∫—Ç–∏–≤–∏—Ä—É–π —Ä–µ–∂–∏–º": modes,
            "–≤–∫–ª—é—á–∏ —Ä–µ–∂–∏–º": modes,
            "–ø–µ—Ä–µ–∫–ª—é—á–∏ –≤ —Ä–µ–∂–∏–º": modes
        }
        self.logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∂–∏–º–æ–≤: {len(modes)}")